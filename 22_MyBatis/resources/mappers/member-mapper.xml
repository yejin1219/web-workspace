<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="memberMapper">
	<!-- namespace : 해당 mapper 파일의 고유한 별청 -->
	
	<!-- resultMap : 조회한 결과를 객체와 Row 간의 1:1 매칭이 아닌, 원하는 객체의 필드에 담아 반환하고자 할 때 사용 -->
	<resultMap type="Member" id="memberMap">
		<!--
			property = 자바 필드 변수 이름 / column = DB 해당 컬럼
			id는 primary key / result는 일반 컬럼
		 -->
		 <id property="id" column="memberid"/>
		 <result property="password" column="memberpass" />
		 <result property="name" column="membername" />
		 <result property="address" column="memberaddr" />
	</resultMap>
	<!--
		* DML문 인 경우
		<insert|update|delete id="식별자" parameterType="전달받을 자바 타입(풀클래스명)|별칭">
		
		SQL문...
		</insert|update|delete>
		
		* SELECT문 인 경우;
		<select id="식별자" [parameterType="전달받을 자바 타입(클래스명)|별칭"]
		resultType="조회결과를 반환하고자 하는 자바 타입" or resultMap="조회결과를 뽑아서 매핑할 resultMap의 id">
		
		SQL문...
		</select>
		
		? 대신 해당 SQL문에 전달된 객체로부터 값을 꺼낼 때 #{필드명 | 변수명 | 키값}을 이용
	-->
			
	<insert id="registerMember" parameterType="Member">
	INSERT INTO MEMBER2(ID, PASSWORD, NAME, ADDRESS)
	VALUES(#{id}, #{password}, #{name}, #{address})
	</insert>
	
	<!-- showAllMember, findByMember, login, updateMember -->
		<!-- SELECT memberid, memberpass, membername, memberaddr
		FROM MEMBER3 -->
	<select id="showAllMember2" resultMap="memberMap">
		SELECT memberid, memberpass, membername, memberaddr
		FROM MEMBER3
	</select>	
	
	<!--
	
		* 마이바티스 동적쿼리
		 - 마이바티스의 강력한 기능 중 하나
		 - 마이바티스에서는 쿼리를 동적으로 제어할 수 있는 요소(Element)들을 제공한다.
		 - 동적 쿼리 요소들을 사용하여 좀 더 쉽게 쿼리를 구현할 수 있다.
		
		 * if
		  - 동적 쿼리를 구현할 때 기본적으로 사용되는 구문
		  - 특정 조건을 만족할 경우 안의 구문을 쿼리에 포함
		  - 필요로 하는 조건이 1개 이상일 경우 여러 개 사용
	
	
	   * choose
	    - 자바의 switch, JSTL의 choose 구문과 유사하여 주어진 구문 중 한가지만을 수행
	    - 하위 요소인 when, otherwise 요소와 함께 사용 
	    
	   * trim / where / set 
	      - trim : 쿼리 구문의 특정 부분을 없앨 때 사용
	               prefix 로 처음 시작할 단어와 prefixOverrides로 시작 시 제거해야 할 단어 명시
	               suffixOverrides 로 끝날 시 제거해야 할 단어 명시 
	               where 또는 set대신 사용 가능
	    
	      - where : 기존 쿼리의 WHERE 절을 동적으로 구현할 때 사용
	                만약 태그 안의 내용이 'AND' 나 'OR'로 시작할 경우 'AND'나 'OR'을 제거
	                
	      - set : 기존의 UPDATE SET 절을 동적으로 구현할 때 사용
                  SET 키워드를 붙이고 불필요한 콤마를 제거 
                  
       * foreach
         - 동적 쿼리를 구현할 때 collection에 대한 반복 처리를 제공
         - 
 	 -->
	
	
	<select id="findByMember" parameterType="list" resultType="Member">
		SELECT *FROM MEMBER2 WHERE id IN
		<foreach collection="list" item ="item" open="(" close=")" separator=",">
		       #{item}
		</foreach>

	 </select>
	 
	    <!-- 
		
			<trim prefix="WHERE" prefixOverrides="AND|OR">  where과 동일  
		   <if test="id != null">
			 id LIKE '%'||#{id}||'%'
		   </if>
		   <if test="address != null">
			 AND address LIKE '%'||#{address}||'%'   where이 AND를 자동으로 인식(아이디, 주소 둘다 들어가는 경우 )했다가, 없앴다가 해줌  
		   </if>
			
		</trim>
		

		 -->
	 
	 
		 <!-- 
		   <choose>
		    <when test="id != null">
		       id LIKE '%'||#{id}||'%'
		    </when>
		    <when test="address!=null">
		       address LIKE '%'||#{address}||'%'
		    </when>
		    <otherwise>
		       name LIKE '%김%'
		    </otherwise>
		 </choose>
		   
		  -->
		 

	
	<select id="login" parameterType="Member" resultType="Member">
	SELECT * FROM MEMBER2 WHERE ID=#{id} AND password=#{password}
	</select>
	
	<update id="updateMember" parameterType="Member">
	  UPDATE MEMBER2 
	  <trim prefix="SET" suffixOverrides=",">  
	        <!-- prefixOverrides(앞에 있는 것을 제거 )랑 같은 역할,set에서는 suffixOverrides(끝에 있는 것을 제거)라고 씀 -->
	   
	    <if test = "password!=null">
	      password=#{password},
	    </if>
	    <if test="name!=null">
	        name=#{name},
	    </if>
	    <if test = "address!=null">
	       address=#{address}      
	    </if>
	 </trim>
      WHERE id=#{id}
	</update>
	
</mapper>

